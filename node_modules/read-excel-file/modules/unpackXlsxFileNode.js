import fs from 'fs';
import Stream from 'stream';
import unzip from 'unzipper';

import { getXlsxEntryKey, validateXlsxEntries } from './readXlsxFileHelpers';

/**
 * Reads XLSX file in Node.js.
 * @param  {(string|Stream)} input - A Node.js readable stream or a path to a file.
 * @param  {object} options
 * @param  {string?} options.sheet - Excel document sheet to read. Defaults to `1`. Will only read this sheet and skip others.
 * @return {Promise} Resolves to an object holding XLSX file entries.
 */
export default function unpackXlsxFile(input, _ref) {
  var sheet = _ref.sheet;

  // XLSX file is a zip archive.
  // The `entries` object stores the files
  // and their contents from this XLSX zip archive.
  var entries = {};

  var stream = input instanceof Stream ? input : fs.createReadStream(input);

  return new Promise(function (resolve, reject) {
    var entryPromises = [];

    stream.pipe(unzip.Parse()).on('error', reject).on('close', function () {
      Promise.all(entryPromises).then(function () {
        return resolve(validateXlsxEntries(entries, sheet));
      });
    }).on('entry', function (entry) {
      var key = getXlsxEntryKey(entry.path, sheet);
      if (key) {
        var contents = '';
        entryPromises.push(new Promise(function (resolve) {
          entry.on('data', function (data) {
            return contents += data.toString();
          }).on('end', function () {
            entries[key] = contents;
            resolve();
          });
        }));
      } else {
        entry.autodrain();
      }
    });
  });
}
//# sourceMappingURL=unpackXlsxFileNode.js.map