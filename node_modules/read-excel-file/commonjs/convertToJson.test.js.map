{"version":3,"sources":["../source/convertToJson.test.js"],"names":["date","convertToUTCTimezone","Date","describe","it","should","deep","equal","DATE","prop","type","NUMBER","Number","BOOLEAN","Boolean","STRING","String","PHONE","parse","value","rows","errors","number","phone","boolean","string","required","error","row","column","NAMES","names","INTEGER","length","URL","EMAIL","NAME","validate","Error","TRUE","FALSE","INVALID","true","false","rowMap","getTime","getTimezoneOffset"],"mappings":"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","file":"convertToJson.test.js","sourcesContent":["import convertToJson, { parseArray, getBlock } from './convertToJson'\r\nimport Integer from './types/Integer'\r\nimport URL from './types/URL'\r\nimport Email from './types/Email'\r\n\r\nconst date = convertToUTCTimezone(new Date(2018, 3 - 1, 24, 12))\r\n\r\ndescribe('convertToJson', () => {\r\n\tit('should parse arrays', () => {\r\n\t\tgetBlock('abc\"de,f\"g,h', ',', 0).should.deep.equal(['abcde,fg', 10])\r\n\t\tparseArray(' abc\"de,f\"g  , h ').should.deep.equal(['abcde,fg', 'h'])\r\n\t})\r\n\r\n\tit('should convert to json', () => {\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'DATE',\r\n\t\t\t\t'NUMBER',\r\n\t\t\t\t'BOOLEAN',\r\n\t\t\t\t'STRING',\r\n\t\t\t\t'PHONE'\r\n\t\t\t], [\r\n\t\t\t\t'43183', // 03/24/2018',\r\n\t\t\t\t'123',\r\n\t\t\t\t'1',\r\n\t\t\t\t'abc',\r\n\t\t\t\t'(123) 456-7890'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tDATE: {\r\n\t\t\t\tprop: 'date',\r\n\t\t\t\ttype: Date,\r\n\t\t\t\t// template: 'MM/DD/YYYY',\r\n\t\t\t},\r\n\t\t\tNUMBER: {\r\n\t\t\t\tprop: 'number',\r\n\t\t\t\ttype: Number\r\n\t\t\t},\r\n\t\t\tBOOLEAN: {\r\n\t\t\t\tprop: 'boolean',\r\n\t\t\t\ttype: Boolean\r\n\t\t\t},\r\n\t\t\tSTRING: {\r\n\t\t\t\tprop: 'string',\r\n\t\t\t\ttype: String\r\n\t\t\t},\r\n\t\t\tPHONE: {\r\n\t\t\t\tprop: 'phone',\r\n\t\t\t\tparse(value) {\r\n\t\t\t\t\treturn '+11234567890'\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\terrors.should.deep.equal([])\r\n\r\n\t\trows.should.deep.equal([{\r\n\t\t\t date,\r\n\t\t\t number: 123,\r\n\t\t\t phone: '+11234567890',\r\n\t\t\t boolean: true,\r\n\t\t\t string: 'abc'\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should require fields', () => {\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'NUMBER'\r\n\t\t\t], [\r\n\t\t\t\tnull\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tNUMBER: {\r\n\t\t\t\tprop: 'number',\r\n\t\t\t\ttype: Number,\r\n\t\t\t\trequired: true\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.should.deep.equal([{\r\n\t\t\terror: 'required',\r\n\t\t\trow: 1,\r\n\t\t\tcolumn: 'NUMBER',\r\n\t\t\ttype: Number,\r\n\t\t\tvalue: null\r\n\t\t}])\r\n\r\n\t\trows.should.deep.equal([])\r\n\t})\r\n\r\n\tit('should parse arrays', () => {\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'NAMES'\r\n\t\t\t], [\r\n\t\t\t\t'Barack Obama, \"String, with, colons\", Donald Trump'\r\n\t\t\t], [\r\n\t\t\t\tnull\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tNAMES: {\r\n\t\t\t\tprop: 'names',\r\n\t\t\t\ttype: [String]\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.should.deep.equal([])\r\n\r\n\t\trows.should.deep.equal([{\r\n\t\t\tnames: ['Barack Obama', 'String, with, colons', 'Donald Trump']\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should parse integers', () =>\r\n\t{\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'INTEGER'\r\n\t\t\t], [\r\n\t\t\t\t'1'\r\n\t\t\t], [\r\n\t\t\t\t'1.2'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tINTEGER: {\r\n\t\t\t\tprop: 'value',\r\n\t\t\t\ttype: Integer\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.length.should.equal(1)\r\n\t\terrors[0].row.should.equal(2)\r\n\t\terrors[0].column.should.equal('INTEGER')\r\n\t\terrors[0].error.should.equal('invalid')\r\n\r\n\t\trows.should.deep.equal([{\r\n\t\t\tvalue: 1\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should parse URLs', () =>\r\n\t{\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'URL'\r\n\t\t\t], [\r\n\t\t\t\t'https://kremlin.ru'\r\n\t\t\t], [\r\n\t\t\t\t'kremlin.ru'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tURL: {\r\n\t\t\t\tprop: 'value',\r\n\t\t\t\ttype: URL\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.length.should.equal(1)\r\n\t\terrors[0].row.should.equal(2)\r\n\t\terrors[0].column.should.equal('URL')\r\n\t\terrors[0].error.should.equal('invalid')\r\n\r\n\t\trows.should.deep.equal([{\r\n\t\t\tvalue: 'https://kremlin.ru'\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should parse Emails', () =>\r\n\t{\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'EMAIL'\r\n\t\t\t], [\r\n\t\t\t\t'vladimir.putin@kremlin.ru'\r\n\t\t\t], [\r\n\t\t\t\t'123'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tEMAIL: {\r\n\t\t\t\tprop: 'value',\r\n\t\t\t\ttype: Email\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.length.should.equal(1)\r\n\t\terrors[0].row.should.equal(2)\r\n\t\terrors[0].column.should.equal('EMAIL')\r\n\t\terrors[0].error.should.equal('invalid')\r\n\r\n\t\trows.should.deep.equal([{\r\n\t\t\tvalue: 'vladimir.putin@kremlin.ru'\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should call .validate()', () => {\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'NAME'\r\n\t\t\t], [\r\n\t\t\t\t'George Bush'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tNAME: {\r\n\t\t\t\tprop: 'name',\r\n\t\t\t\ttype: String,\r\n\t\t\t\trequired: true,\r\n\t\t\t\tvalidate: (value) => {\r\n\t\t\t\t\tif (value === 'George Bush') {\r\n\t\t\t\t\t\tthrow new Error('custom-error')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.should.deep.equal([{\r\n\t\t\terror: 'custom-error',\r\n\t\t\trow: 1,\r\n\t\t\tcolumn: 'NAME',\r\n\t\t\ttype: String,\r\n\t\t\tvalue: 'George Bush'\r\n\t\t}])\r\n\r\n\t\trows.should.deep.equal([])\r\n\t})\r\n\r\n\tit('should validate numbers', () => {\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'NUMBER'\r\n\t\t\t], [\r\n\t\t\t\t'123abc'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tNUMBER: {\r\n\t\t\t\tprop: 'number',\r\n\t\t\t\ttype: Number,\r\n\t\t\t\trequired: true\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.should.deep.equal([{\r\n\t\t\terror: 'invalid',\r\n\t\t\trow: 1,\r\n\t\t\tcolumn: 'NUMBER',\r\n\t\t\ttype: Number,\r\n\t\t\tvalue: '123abc'\r\n\t\t}])\r\n\r\n\t\trows.should.deep.equal([])\r\n\t})\r\n\r\n\tit('should validate booleans', () => {\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'TRUE',\r\n\t\t\t\t'FALSE',\r\n\t\t\t\t'INVALID'\r\n\t\t\t], [\r\n\t\t\t\t'1',\r\n\t\t\t\t'0',\r\n\t\t\t\t'TRUE'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tTRUE: {\r\n\t\t\t\tprop: 'true',\r\n\t\t\t\ttype: Boolean,\r\n\t\t\t\trequired: true\r\n\t\t\t},\r\n\t\t\tFALSE: {\r\n\t\t\t\tprop: 'false',\r\n\t\t\t\ttype: Boolean,\r\n\t\t\t\trequired: true\r\n\t\t\t},\r\n\t\t\tINVALID: {\r\n\t\t\t\tprop: 'invalid',\r\n\t\t\t\ttype: Boolean,\r\n\t\t\t\trequired: true\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.should.deep.equal([{\r\n\t\t\terror: 'invalid',\r\n\t\t\trow: 1,\r\n\t\t\tcolumn: 'INVALID',\r\n\t\t\ttype: Boolean,\r\n\t\t\tvalue: 'TRUE'\r\n\t\t}])\r\n\r\n\t\trows.should.deep.equal([{\r\n\t\t\ttrue: true,\r\n\t\t\tfalse: false\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should validate dates', () => {\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'DATE',\r\n\t\t\t\t'INVALID'\r\n\t\t\t], [\r\n\t\t\t\t'43183', // 03/24/2018',\r\n\t\t\t\t'-'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tDATE: {\r\n\t\t\t\tprop: 'date',\r\n\t\t\t\ttype: Date,\r\n\t\t\t\t// template: 'MM/DD/YYYY',\r\n\t\t\t\trequired: true\r\n\t\t\t},\r\n\t\t\tINVALID: {\r\n\t\t\t\tprop: 'invalid',\r\n\t\t\t\ttype: Date,\r\n\t\t\t\t// template: 'MM/DD/YYYY',\r\n\t\t\t\trequired: true\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.should.deep.equal([{\r\n\t\t\terror: 'invalid',\r\n\t\t\trow: 1,\r\n\t\t\tcolumn: 'INVALID',\r\n\t\t\ttype: Date,\r\n\t\t\tvalue: '-'\r\n\t\t}])\r\n\r\n\t\trows.should.deep.equal([{\r\n\t\t\tdate\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should throw parse() errors', () => {\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'PHONE'\r\n\t\t\t], [\r\n\t\t\t\t'123'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tPHONE: {\r\n\t\t\t\tprop: 'phone',\r\n\t\t\t\tparse: () => {\r\n\t\t\t\t\tthrow new Error('invalid')\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\terrors.should.deep.equal([{\r\n\t\t\terror: 'invalid',\r\n\t\t\trow: 1,\r\n\t\t\tcolumn: 'PHONE',\r\n\t\t\tvalue: '123'\r\n\t\t}])\r\n\r\n\t\trows.should.deep.equal([])\r\n\t})\r\n\r\n\tit('should map row numbers', () => {\r\n\t\tconst { rows, errors } = convertToJson([\r\n\t\t\t[\r\n\t\t\t\t'NUMBER'\r\n\t\t\t], [\r\n\t\t\t\t'123abc'\r\n\t\t\t]\r\n\t\t], {\r\n\t\t\tNUMBER: {\r\n\t\t\t\tprop: 'number',\r\n\t\t\t\ttype: Number\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\trowMap: [2, 5]\r\n\t\t})\r\n\r\n\t\terrors.should.deep.equal([{\r\n\t\t\terror: 'invalid',\r\n\t\t\trow: 6,\r\n\t\t\tcolumn: 'NUMBER',\r\n\t\t\ttype: Number,\r\n\t\t\tvalue: '123abc'\r\n\t\t}])\r\n\t})\r\n})\r\n\r\n\r\n// Converts timezone to UTC while preserving the same time\r\nfunction convertToUTCTimezone(date) {\r\n\t// Doesn't account for leap seconds but I guess that's ok\r\n\t// given that javascript's own `Date()` does not either.\r\n\t// https://www.timeanddate.com/time/leap-seconds-background.html\r\n\t//\r\n\t// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\r\n\t//\r\n\treturn new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000)\r\n}\r\n"]}