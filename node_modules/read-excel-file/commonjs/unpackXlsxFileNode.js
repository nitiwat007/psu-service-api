'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = unpackXlsxFile;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _unzipper = require('unzipper');

var _unzipper2 = _interopRequireDefault(_unzipper);

var _readXlsxFileHelpers = require('./readXlsxFileHelpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Reads XLSX file in Node.js.
 * @param  {(string|Stream)} input - A Node.js readable stream or a path to a file.
 * @param  {object} options
 * @param  {string?} options.sheet - Excel document sheet to read. Defaults to `1`. Will only read this sheet and skip others.
 * @return {Promise} Resolves to an object holding XLSX file entries.
 */
function unpackXlsxFile(input, _ref) {
  var sheet = _ref.sheet;

  // XLSX file is a zip archive.
  // The `entries` object stores the files
  // and their contents from this XLSX zip archive.
  var entries = {};

  var stream = input instanceof _stream2.default ? input : _fs2.default.createReadStream(input);

  return new Promise(function (resolve, reject) {
    var entryPromises = [];

    stream.pipe(_unzipper2.default.Parse()).on('error', reject).on('close', function () {
      Promise.all(entryPromises).then(function () {
        return resolve((0, _readXlsxFileHelpers.validateXlsxEntries)(entries, sheet));
      });
    }).on('entry', function (entry) {
      var key = (0, _readXlsxFileHelpers.getXlsxEntryKey)(entry.path, sheet);
      if (key) {
        var contents = '';
        entryPromises.push(new Promise(function (resolve) {
          entry.on('data', function (data) {
            return contents += data.toString();
          }).on('end', function () {
            entries[key] = contents;
            resolve();
          });
        }));
      } else {
        entry.autodrain();
      }
    });
  });
}
//# sourceMappingURL=unpackXlsxFileNode.js.map