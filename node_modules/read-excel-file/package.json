{
  "_args": [
    [
      {
        "raw": "read-excel-file",
        "scope": null,
        "escapedName": "read-excel-file",
        "name": "read-excel-file",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\AMD_T\\Google Drive\\Applications\\Reactjs\\psu-service-api"
    ]
  ],
  "_from": "read-excel-file@latest",
  "_id": "read-excel-file@1.3.3",
  "_inCache": true,
  "_location": "/read-excel-file",
  "_nodeVersion": "9.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/read-excel-file_1.3.3_1526649625891_0.1839447360716815"
  },
  "_npmUser": {
    "name": "catamphetamine",
    "email": "purecatamphetamine@gmail.com"
  },
  "_npmVersion": "6.0.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "read-excel-file",
    "scope": null,
    "escapedName": "read-excel-file",
    "name": "read-excel-file",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/read-excel-file/-/read-excel-file-1.3.3.tgz",
  "_shasum": "30f497be3060f99ac8d395c74604a769a88bf8f7",
  "_shrinkwrap": null,
  "_spec": "read-excel-file",
  "_where": "C:\\Users\\AMD_T\\Google Drive\\Applications\\Reactjs\\psu-service-api",
  "author": {
    "name": "catamphetamine",
    "email": "purecatamphetamine@gmail.com"
  },
  "betterScripts": {
    "browser-build": {
      "command": "npm run build-commonjs-modules && webpack --mode production --progress --colors",
      "env": {
        "WEBPACK_ENV": "build"
      }
    },
    "build-commonjs-modules": {
      "command": "babel ./source --out-dir ./commonjs --source-maps",
      "env": {
        "BABEL_ENV": "commonjs"
      }
    },
    "build-es6-modules": {
      "command": "babel ./source --out-dir ./modules --source-maps",
      "env": {
        "BABEL_ENV": "es6"
      }
    }
  },
  "bugs": {
    "url": "https://github.com/catamphetamine/read-excel-file/issues"
  },
  "contributors": [
    {
      "name": "Trevor Dixon",
      "email": "trevordixon@gmail.com"
    },
    {
      "name": "Steve Tarver",
      "email": "steve.tarver@gmail.com"
    },
    {
      "name": "Jake Scott",
      "email": "scott.iroh@gmail.com"
    },
    {
      "name": "Fabian Tollenaar",
      "email": "fabian@starting-point.nl"
    }
  ],
  "dependencies": {
    "jszip": "^3.1.5",
    "unzipper": "^0.8.11",
    "xmldom": "^0.1.27",
    "xpath": "0.0.27"
  },
  "description": "Read `*.xlsx` files in a browser or Node.js. Parse to JSON with a strict schema.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-loader": "^7.1.4",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "better-npm-run": "^0.1.0",
    "chai": "^4.1.2",
    "mocha": "^1.17.1",
    "npm-run-all": "^4.1.2",
    "webpack": "^4.1.1",
    "webpack-cli": "^2.0.12"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-v1XVvc7lwZAPhpfj5Ou8QvqCJUoewU3Uk/cYc3WqLoMdhDLBGWoxeqAWYbJH8kbKzOi+3KT7kbTJeBbhFLnznw==",
    "shasum": "30f497be3060f99ac8d395c74604a769a88bf8f7",
    "tarball": "https://registry.npmjs.org/read-excel-file/-/read-excel-file-1.3.3.tgz",
    "fileCount": 77,
    "unpackedSize": 1192578,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa/tMbCRA9TVsSAnZWagAAEMoQAIhnBzs27LyLOw8neDEp\nUbTlp/o15pPyX9sngdScos+p4dOUXRnDaSV6+NJKvvlr91SJK/OLLqeoeCKe\nGR0/bz657n891V2HTjAR+OeJQSmcAkZmZ1V4q3Lbdumh2HZV0Omh3M4K4det\nJifJlJ0pXtlxO8ErZz8nVnO2YPIfFloKkQ7870AgeREULYIEWXAyem6OljBD\nlJsRI34I1CEtqTewz8jc/xr+kJnsPs/5mTbiqRthqOYWLhrqDM6iEZXIG2uY\npf3L5d1p64pgCtdebNcPE/oRxqHI4WEZiwYTIHgd+tMIvZQphpz1lYTjwblj\n4cW1Feby+SXjmAY6umeU+5Qv3ajcsZ8D2HvcHWOthUOKKLXoQKXDRZ6TOWJn\nCLcs1f5xHXo16Hn51UjffPRoEaWrXDX2NDBrT08LKyxCaMZ2bGY9bqTEeqUF\nLFOblMy59O/e7QpzmktMXV3a+zLxIM9bqHH0lonk66fqqu7XwSD3vqBp+H3/\n8ZPfLKS1OegNmYHFzadVQPFako0krwjCCQ5pNtL95O7F1u43m9HXokr2IuP8\nxBq06Pm3/xImD6KtJDIMDTZslFeArW2tlMIM1ypUvvcJBk7HSiQ+5ldE+K1B\n7idwJh3Pg/rkd6gErs0gM5JRawP+z0iQwgRnCy4FKFMjt8NL2gNKlq5s5kiN\nAXAL\r\n=ob1Q\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "8096ee3c11147be94851829a737c60e6b7db0406",
  "homepage": "https://github.com/catamphetamine/read-excel-file#readme",
  "keywords": [
    "excel",
    "xlsx",
    "browser",
    "json"
  ],
  "license": "MIT",
  "main": "index.commonjs.js",
  "maintainers": [
    {
      "name": "catamphetamine",
      "email": "purecatamphetamine@gmail.com"
    }
  ],
  "module": "index.js",
  "name": "read-excel-file",
  "optionalDependencies": {},
  "readme": "# `read-excel-file`\r\n\r\nRead `*.xlsx` files in a browser or Node.js. Parse to JSON with a strict schema.\r\n\r\n[Demo](https://catamphetamine.github.io/read-excel-file/)\r\n\r\n## Install\r\n\r\n```js\r\nnpm install read-excel-file --save\r\n```\r\n\r\n## Browser\r\n\r\n```html\r\n<input type=\"file\" id=\"input\" />\r\n```\r\n\r\n```js\r\nimport readXlsxFile from 'read-excel-file'\r\n\r\nconst input = document.getElementById('input')\r\n\r\ninput.addEventListener('change', () => {\r\n  readXlsxFile(input.files[0]).then((rows) => {\r\n    // `rows` is an array of rows\r\n    // each row being an array of cells.\r\n  })\r\n})\r\n```\r\n\r\n## Node.js\r\n\r\n```js\r\nimport readXlsxFile from 'read-excel-file/node'\r\n\r\n// File path.\r\nreadXlsxFile('/path/to/file').then((rows) => {\r\n  // `rows` is an array of rows\r\n  // each row being an array of cells.\r\n})\r\n\r\n// Readable Stream.\r\nreadXlsxFile(fs.createReadStream('/path/to/file')).then((rows) => {\r\n  ...\r\n})\r\n```\r\n\r\n## JSON\r\n\r\nTo convert rows to JSON pass `schema` option to `readXlsxFile()`. It will return `{ rows, errors }` object instead of just `rows`.\r\n\r\n```js\r\n// An example *.xlsx document:\r\n// -----------------------------------------------------------------------------\r\n// | START DATE | NUMBER OF STUDENTS | IS FREE | COURSE TITLE |    CONTACT     |\r\n// -----------------------------------------------------------------------------\r\n// | 03/24/2018 |         123        |   true  |  Chemistry   | (123) 456-7890 |\r\n// -----------------------------------------------------------------------------\r\n\r\nconst schema = {\r\n  'START DATE': {\r\n    prop: 'date',\r\n    type: Date\r\n    // Excel stores dates as integers.\r\n    // E.g. '24/03/2018' === 43183.\r\n    // Such dates are parsed to UTC+0 timezone with time 12:00 .\r\n  },\r\n  'NUMBER OF STUDENTS': {\r\n    prop: 'numberOfStudents',\r\n    type: Number,\r\n    required: true\r\n  },\r\n  'COURSE': {\r\n    prop: 'course',\r\n    type: {\r\n      'IS FREE': {\r\n        prop: 'isFree',\r\n        type: Boolean\r\n        // Excel stored booleans as numbers:\r\n        // `1` is `true` and `0` is `false`.\r\n        // Such numbers are parsed to booleans.\r\n      },\r\n      'COURSE TITLE': {\r\n        prop: 'title',\r\n        type: String\r\n      }\r\n    }\r\n  },\r\n  'CONTACT': {\r\n    prop: 'contact',\r\n    required: true,\r\n    parse(value) {\r\n      const number = parsePhoneNumber(value)\r\n      if (!number) {\r\n        throw new Error('invalid')\r\n      }\r\n      return number\r\n    }\r\n  }\r\n}\r\n\r\nreadXlsxFile(file, { schema }).then(({ rows, errors }) => {\r\n  // `errors` have shape `{ row, column, error, value }`.\r\n  errors.length === 0\r\n\r\n  rows === [{\r\n    date: new Date(2018, 2, 24),\r\n    numberOfStudents: 123,\r\n    course: {\r\n      isFree: true,\r\n      title: 'Chemistry'\r\n    },\r\n    contact: '+11234567890',\r\n  }]\r\n})\r\n```\r\n\r\nThere are also some additional exported `type`s:\r\n\r\n* `\"Integer\"` for parsing integer `Number`s.\r\n* `\"URL\"` for parsing URLs.\r\n* `\"Email\"` for parsing email addresses.\r\n\r\nA schema entry for a column can also have a `validate(value)` function for validating the parsed value. It must `throw` an `Error` if the value is invalid.\r\n\r\nA React component for displaying error info could look like this:\r\n\r\n```js\r\nimport { parseExcelDate } from 'read-excel-file'\r\n\r\nfunction ParseExcelError({ children: error }) {\r\n  // Human-readable value.\r\n  let value = error.value\r\n  if (error.type === Date) {\r\n    value = parseExcelDate(value).toString()\r\n  }\r\n  // Error summary.\r\n  return (\r\n    <div>\r\n      <code>\"{error.error}\"</code>\r\n      {' for value '}\r\n      <code>\"{value}\"</code>\r\n      {' in column '}\r\n      <code>\"{error.column}\"</code>\r\n      {error.type && ' of type '}\r\n      {error.type && <code>\"{error.type.name}\"</code>}\r\n      {' in row '}\r\n      <code>\"{error.row}\"</code>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n## Browser compatibility\r\n\r\nNode.js `*.xlxs` parser uses `xpath` and `xmldom` universal packages for XML parsing. The same packages could be used in a browser too but since [all modern browsers](https://caniuse.com/#search=domparser) (including IE 11) already have native `DOMParser` built-in this native implementation is used (which means smaller footprint and better performance).\r\n\r\n## Advanced\r\n\r\nBy default it reads the first sheet in the document. If you have multiple sheets in your spreadsheet then pass `sheet: number` as part of the `options` argument (`options.sheet` is `1` by default):\r\n\r\n```js\r\nreadXlsxFile(selectedFile, { sheet: 2 }).then((data) => {\r\n  ...\r\n})\r\n````\r\n\r\n## References\r\n\r\nThis project is based on [`excel`](https://github.com/trevordixon/excel.js) by @trevordixon and [`excel-as-json`](https://github.com/stevetarver/excel-as-json/blob) by @stevetarver.\r\n\r\nFor XML parsing [`xmldom`](https://github.com/jindw/xmldom) and [`xpath`](https://github.com/goto100/xpath) are used.\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/catamphetamine/read-excel-file.git"
  },
  "scripts": {
    "browser-build": "better-npm-run browser-build",
    "build": "npm-run-all clean-for-build build-commonjs-modules build-es6-modules",
    "build-commonjs-modules": "better-npm-run build-commonjs-modules",
    "build-es6-modules": "better-npm-run build-es6-modules",
    "clean-for-build": "rimraf ./commonjs/**/* ./modules/**/*",
    "prepublish": "npm-run-all build test browser-build",
    "test": "mocha --compilers js:babel-core/register --colors --bail --reporter spec --require ./test/setup.js \"./{,!(node_modules|commonjs|modules)/**/}*.test.js\" --recursive",
    "test-coverage": "istanbul cover -x \"commonjs/**\" -x \"modules/**\" -x \"*.test.js\" node_modules/mocha/bin/_mocha -- --compilers js:babel-core/register --colors --reporter dot --require ./test/setup.js \"./{,!(node_modules|commonjs|modules)/**/}*.test.js\" --recursive",
    "test-travis": "istanbul cover -x \"commonjs/**\" -x \"modules/**\" -x \"*.test.js\" node_modules/mocha/bin/_mocha --report lcovonly -- --compilers js:babel-core/register --colors --reporter spec --require ./test/setup.js \"./{,!(node_modules|commonjs|modules)/**/}*.test.js\" --recursive"
  },
  "version": "1.3.3"
}
